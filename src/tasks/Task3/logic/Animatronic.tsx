import { Logger } from '../../../utils';
import { Scene } from './Scene';
import { makeAutoObservable, reaction } from 'mobx';
import faker from '@faker-js/faker';

export class Animatronic {
  public readonly name: string;

  public currentAction: '—Å—Ç–æ–∏—Ç' | '—Ç–∞–Ω—Ü—É–µ—Ç' | '–ø–æ—ë—Ç' = '—Å—Ç–æ–∏—Ç';

  constructor(scene: Scene, logger: Logger) {
    this.name = `${faker.name.firstName()} ${faker.name.suffix()}`;

    makeAutoObservable(this);

    reaction(
      () => scene.currentScenario,
      (currentScenario) => {
        switch (currentScenario) {
          case '–û—Ç–∫–ª—é—á–∏—Ç—å': {
            this.currentAction = '—Å—Ç–æ–∏—Ç';
            return;
          }
          case '–°—Ü–µ–Ω–∞—Ä–∏–π 1': {
            this.currentAction = '—Ç–∞–Ω—Ü—É–µ—Ç';
            return;
          }
          case '–°—Ü–µ–Ω–∞—Ä–∏–π 2': {
            this.currentAction = '–ø–æ—ë—Ç';
          }
        }
      },
    );

    reaction(
      () => this.currentAction,
      (currentAction) => {
        switch (currentAction) {
          case '—Å—Ç–æ–∏—Ç': {
            logger.log(
              <span>
                [<b>{this.name}</b>]: –û–∂–∏–¥–∞–µ—Ç <span className="emoji">üò¥</span>
              </span>,
            );
            return;
          }
          case '—Ç–∞–Ω—Ü—É–µ—Ç': {
            logger.log(
              <span>
                [<b>{this.name}</b>]: –ù–∞—á–∏–Ω–∞–µ—Ç —Ç–∞–Ω—Ü–µ–≤–∞—Ç—å <span className="emoji">üò∏</span>
              </span>,
            );
            return;
          }
          case '–ø–æ—ë—Ç': {
            logger.error(
              <span>
                [<b>{this.name}</b>]: –ù–∞—á–∏–Ω–∞–µ—Ç —É–±–∏–≤–∞—Ç—å <span className="emoji">üôÄ</span>
              </span>,
            );
          }
        }
      },
    );
  }
}
